/* 
 * Payment Initiation API
 *
 * Swagger for Payment Initiation API Specification
 *
 * OpenAPI spec version: v3.1.2-RC1
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FinnovationLabs.OpenBanking.Library.Connector.ObModel.PaymentInitiation.V3p1p2.Model
{
    /// <summary>
    /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single domestic payment.
    /// </summary>
    [DataContract]
    public partial class OBWriteDomesticResponse3DataInitiation :  IEquatable<OBWriteDomesticResponse3DataInitiation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OBWriteDomesticResponse3DataInitiation" /> class.
        /// </summary>
        [JsonConstructor]
        protected OBWriteDomesticResponse3DataInitiation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OBWriteDomesticResponse3DataInitiation" /> class.
        /// </summary>
        /// <param name="supplementaryData">supplementaryData.</param>
        /// <param name="localInstrument">User community specific instrument. Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level..</param>
        /// <param name="debtorAccount">debtorAccount.</param>
        /// <param name="remittanceInformation">remittanceInformation.</param>
        /// <param name="endToEndIdentification">Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain. Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction. OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field. (required).</param>
        /// <param name="instructionIdentification">Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction. Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction. (required).</param>
        /// <param name="creditorAccount">creditorAccount (required).</param>
        /// <param name="instructedAmount">instructedAmount (required).</param>
        /// <param name="creditorPostalAddress">creditorPostalAddress.</param>
        public OBWriteDomesticResponse3DataInitiation(OBSupplementaryData1 supplementaryData = default(OBSupplementaryData1), string localInstrument = default(string), OBWriteFile2DataInitiationDebtorAccount debtorAccount = default(OBWriteFile2DataInitiationDebtorAccount), OBWriteFile2DataInitiationRemittanceInformation remittanceInformation = default(OBWriteFile2DataInitiationRemittanceInformation), string endToEndIdentification = default(string), string instructionIdentification = default(string), OBWriteDomesticScheduled2DataInitiationCreditorAccount creditorAccount = default(OBWriteDomesticScheduled2DataInitiationCreditorAccount), OBWriteDomesticScheduled2DataInitiationInstructedAmount instructedAmount = default(OBWriteDomesticScheduled2DataInitiationInstructedAmount), OBPostalAddress6 creditorPostalAddress = default(OBPostalAddress6))
        {
            // to ensure "endToEndIdentification" is required (not null)
            if (endToEndIdentification == null)
            {
                throw new InvalidDataException("endToEndIdentification is a required property for OBWriteDomesticResponse3DataInitiation and cannot be null");
            }
            else
            {
                this.EndToEndIdentification = endToEndIdentification;
            }
            // to ensure "instructionIdentification" is required (not null)
            if (instructionIdentification == null)
            {
                throw new InvalidDataException("instructionIdentification is a required property for OBWriteDomesticResponse3DataInitiation and cannot be null");
            }
            else
            {
                this.InstructionIdentification = instructionIdentification;
            }
            // to ensure "creditorAccount" is required (not null)
            if (creditorAccount == null)
            {
                throw new InvalidDataException("creditorAccount is a required property for OBWriteDomesticResponse3DataInitiation and cannot be null");
            }
            else
            {
                this.CreditorAccount = creditorAccount;
            }
            // to ensure "instructedAmount" is required (not null)
            if (instructedAmount == null)
            {
                throw new InvalidDataException("instructedAmount is a required property for OBWriteDomesticResponse3DataInitiation and cannot be null");
            }
            else
            {
                this.InstructedAmount = instructedAmount;
            }
            this.SupplementaryData = supplementaryData;
            this.LocalInstrument = localInstrument;
            this.DebtorAccount = debtorAccount;
            this.RemittanceInformation = remittanceInformation;
            this.CreditorPostalAddress = creditorPostalAddress;
        }
        
        /// <summary>
        /// Gets or Sets SupplementaryData
        /// </summary>
        [DataMember(Name="SupplementaryData", EmitDefaultValue=false)]
        public OBSupplementaryData1 SupplementaryData { get; set; }

        /// <summary>
        /// User community specific instrument. Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
        /// </summary>
        /// <value>User community specific instrument. Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.</value>
        [DataMember(Name="LocalInstrument", EmitDefaultValue=false)]
        public string LocalInstrument { get; set; }

        /// <summary>
        /// Gets or Sets DebtorAccount
        /// </summary>
        [DataMember(Name="DebtorAccount", EmitDefaultValue=false)]
        public OBWriteFile2DataInitiationDebtorAccount DebtorAccount { get; set; }

        /// <summary>
        /// Gets or Sets RemittanceInformation
        /// </summary>
        [DataMember(Name="RemittanceInformation", EmitDefaultValue=false)]
        public OBWriteFile2DataInitiationRemittanceInformation RemittanceInformation { get; set; }

        /// <summary>
        /// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain. Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction. OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
        /// </summary>
        /// <value>Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain. Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction. OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.</value>
        [DataMember(Name="EndToEndIdentification", EmitDefaultValue=false)]
        public string EndToEndIdentification { get; set; }

        /// <summary>
        /// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction. Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
        /// </summary>
        /// <value>Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction. Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.</value>
        [DataMember(Name="InstructionIdentification", EmitDefaultValue=false)]
        public string InstructionIdentification { get; set; }

        /// <summary>
        /// Gets or Sets CreditorAccount
        /// </summary>
        [DataMember(Name="CreditorAccount", EmitDefaultValue=false)]
        public OBWriteDomesticScheduled2DataInitiationCreditorAccount CreditorAccount { get; set; }

        /// <summary>
        /// Gets or Sets InstructedAmount
        /// </summary>
        [DataMember(Name="InstructedAmount", EmitDefaultValue=false)]
        public OBWriteDomesticScheduled2DataInitiationInstructedAmount InstructedAmount { get; set; }

        /// <summary>
        /// Gets or Sets CreditorPostalAddress
        /// </summary>
        [DataMember(Name="CreditorPostalAddress", EmitDefaultValue=false)]
        public OBPostalAddress6 CreditorPostalAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OBWriteDomesticResponse3DataInitiation {\n");
            sb.Append("  SupplementaryData: ").Append(SupplementaryData).Append("\n");
            sb.Append("  LocalInstrument: ").Append(LocalInstrument).Append("\n");
            sb.Append("  DebtorAccount: ").Append(DebtorAccount).Append("\n");
            sb.Append("  RemittanceInformation: ").Append(RemittanceInformation).Append("\n");
            sb.Append("  EndToEndIdentification: ").Append(EndToEndIdentification).Append("\n");
            sb.Append("  InstructionIdentification: ").Append(InstructionIdentification).Append("\n");
            sb.Append("  CreditorAccount: ").Append(CreditorAccount).Append("\n");
            sb.Append("  InstructedAmount: ").Append(InstructedAmount).Append("\n");
            sb.Append("  CreditorPostalAddress: ").Append(CreditorPostalAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OBWriteDomesticResponse3DataInitiation);
        }

        /// <summary>
        /// Returns true if OBWriteDomesticResponse3DataInitiation instances are equal
        /// </summary>
        /// <param name="input">Instance of OBWriteDomesticResponse3DataInitiation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OBWriteDomesticResponse3DataInitiation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SupplementaryData == input.SupplementaryData ||
                    (this.SupplementaryData != null &&
                    this.SupplementaryData.Equals(input.SupplementaryData))
                ) && 
                (
                    this.LocalInstrument == input.LocalInstrument ||
                    (this.LocalInstrument != null &&
                    this.LocalInstrument.Equals(input.LocalInstrument))
                ) && 
                (
                    this.DebtorAccount == input.DebtorAccount ||
                    (this.DebtorAccount != null &&
                    this.DebtorAccount.Equals(input.DebtorAccount))
                ) && 
                (
                    this.RemittanceInformation == input.RemittanceInformation ||
                    (this.RemittanceInformation != null &&
                    this.RemittanceInformation.Equals(input.RemittanceInformation))
                ) && 
                (
                    this.EndToEndIdentification == input.EndToEndIdentification ||
                    (this.EndToEndIdentification != null &&
                    this.EndToEndIdentification.Equals(input.EndToEndIdentification))
                ) && 
                (
                    this.InstructionIdentification == input.InstructionIdentification ||
                    (this.InstructionIdentification != null &&
                    this.InstructionIdentification.Equals(input.InstructionIdentification))
                ) && 
                (
                    this.CreditorAccount == input.CreditorAccount ||
                    (this.CreditorAccount != null &&
                    this.CreditorAccount.Equals(input.CreditorAccount))
                ) && 
                (
                    this.InstructedAmount == input.InstructedAmount ||
                    (this.InstructedAmount != null &&
                    this.InstructedAmount.Equals(input.InstructedAmount))
                ) && 
                (
                    this.CreditorPostalAddress == input.CreditorPostalAddress ||
                    (this.CreditorPostalAddress != null &&
                    this.CreditorPostalAddress.Equals(input.CreditorPostalAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SupplementaryData != null)
                    hashCode = hashCode * 59 + this.SupplementaryData.GetHashCode();
                if (this.LocalInstrument != null)
                    hashCode = hashCode * 59 + this.LocalInstrument.GetHashCode();
                if (this.DebtorAccount != null)
                    hashCode = hashCode * 59 + this.DebtorAccount.GetHashCode();
                if (this.RemittanceInformation != null)
                    hashCode = hashCode * 59 + this.RemittanceInformation.GetHashCode();
                if (this.EndToEndIdentification != null)
                    hashCode = hashCode * 59 + this.EndToEndIdentification.GetHashCode();
                if (this.InstructionIdentification != null)
                    hashCode = hashCode * 59 + this.InstructionIdentification.GetHashCode();
                if (this.CreditorAccount != null)
                    hashCode = hashCode * 59 + this.CreditorAccount.GetHashCode();
                if (this.InstructedAmount != null)
                    hashCode = hashCode * 59 + this.InstructedAmount.GetHashCode();
                if (this.CreditorPostalAddress != null)
                    hashCode = hashCode * 59 + this.CreditorPostalAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EndToEndIdentification (string) maxLength
            if(this.EndToEndIdentification != null && this.EndToEndIdentification.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndToEndIdentification, length must be less than 35.", new [] { "EndToEndIdentification" });
            }

            // EndToEndIdentification (string) minLength
            if(this.EndToEndIdentification != null && this.EndToEndIdentification.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndToEndIdentification, length must be greater than 1.", new [] { "EndToEndIdentification" });
            }

            // InstructionIdentification (string) maxLength
            if(this.InstructionIdentification != null && this.InstructionIdentification.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstructionIdentification, length must be less than 35.", new [] { "InstructionIdentification" });
            }

            // InstructionIdentification (string) minLength
            if(this.InstructionIdentification != null && this.InstructionIdentification.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstructionIdentification, length must be greater than 1.", new [] { "InstructionIdentification" });
            }

            yield break;
        }
    }

}
