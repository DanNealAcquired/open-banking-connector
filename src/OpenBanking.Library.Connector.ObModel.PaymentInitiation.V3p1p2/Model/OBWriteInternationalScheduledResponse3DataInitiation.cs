/* 
 * Payment Initiation API
 *
 * Swagger for Payment Initiation API Specification
 *
 * OpenAPI spec version: v3.1.2-RC1
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace FinnovationLabs.OpenBanking.Library.Connector.ObModel.PaymentInitiation.V3p1p2.Model
{
    /// <summary>
    /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled international payment.
    /// </summary>
    [DataContract]
    public partial class OBWriteInternationalScheduledResponse3DataInitiation :  IEquatable<OBWriteInternationalScheduledResponse3DataInitiation>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ChargeBearer
        /// </summary>
        [DataMember(Name="ChargeBearer", EmitDefaultValue=false)]
        public OBChargeBearerType1Code? ChargeBearer { get; set; }
        /// <summary>
        /// Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
        /// </summary>
        /// <value>Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InstructionPriorityEnum
        {
            /// <summary>
            /// Enum Normal for value: Normal
            /// </summary>
            [EnumMember(Value = "Normal")]
            Normal = 1,

            /// <summary>
            /// Enum Urgent for value: Urgent
            /// </summary>
            [EnumMember(Value = "Urgent")]
            Urgent = 2

        }

        /// <summary>
        /// Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
        /// </summary>
        /// <value>Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.</value>
        [DataMember(Name="InstructionPriority", EmitDefaultValue=false)]
        public InstructionPriorityEnum? InstructionPriority { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OBWriteInternationalScheduledResponse3DataInitiation" /> class.
        /// </summary>
        [JsonConstructor]
        protected OBWriteInternationalScheduledResponse3DataInitiation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OBWriteInternationalScheduledResponse3DataInitiation" /> class.
        /// </summary>
        /// <param name="supplementaryData">supplementaryData.</param>
        /// <param name="debtorAccount">debtorAccount.</param>
        /// <param name="creditorAgent">creditorAgent.</param>
        /// <param name="endToEndIdentification">Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain. Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction. OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field..</param>
        /// <param name="instructionIdentification">Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction. Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction. (required).</param>
        /// <param name="currencyOfTransfer">Specifies the currency of the to be transferred amount, which is different from the currency of the debtor&#39;s account. (required).</param>
        /// <param name="creditorAccount">creditorAccount (required).</param>
        /// <param name="purpose">Specifies the external purpose code in the format of character string with a maximum length of 4 characters. The list of valid codes is an external code list published separately. External code sets can be downloaded from www.iso20022.org..</param>
        /// <param name="chargeBearer">chargeBearer.</param>
        /// <param name="instructionPriority">Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction..</param>
        /// <param name="requestedExecutionDateTime">Date at which the initiating party requests the clearing agent to process the payment.  Usage: This is the date on which the debtor&#39;s account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00 (required).</param>
        /// <param name="localInstrument">User community specific instrument. Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level..</param>
        /// <param name="remittanceInformation">remittanceInformation.</param>
        /// <param name="exchangeRateInformation">exchangeRateInformation.</param>
        /// <param name="creditor">creditor.</param>
        /// <param name="instructedAmount">instructedAmount (required).</param>
        public OBWriteInternationalScheduledResponse3DataInitiation(OBSupplementaryData1 supplementaryData = default(OBSupplementaryData1), OBWriteFile2DataInitiationDebtorAccount debtorAccount = default(OBWriteFile2DataInitiationDebtorAccount), OBWriteInternationalConsent3DataInitiationCreditorAgent creditorAgent = default(OBWriteInternationalConsent3DataInitiationCreditorAgent), string endToEndIdentification = default(string), string instructionIdentification = default(string), string currencyOfTransfer = default(string), OBWriteDomesticScheduled2DataInitiationCreditorAccount creditorAccount = default(OBWriteDomesticScheduled2DataInitiationCreditorAccount), string purpose = default(string), OBChargeBearerType1Code? chargeBearer = default(OBChargeBearerType1Code?), InstructionPriorityEnum? instructionPriority = default(InstructionPriorityEnum?), DateTime? requestedExecutionDateTime = default(DateTime?), string localInstrument = default(string), OBWriteFile2DataInitiationRemittanceInformation remittanceInformation = default(OBWriteFile2DataInitiationRemittanceInformation), OBWriteInternationalConsent3DataInitiationExchangeRateInformation exchangeRateInformation = default(OBWriteInternationalConsent3DataInitiationExchangeRateInformation), OBWriteInternationalConsent3DataInitiationCreditor creditor = default(OBWriteInternationalConsent3DataInitiationCreditor), OBWriteDomesticScheduled2DataInitiationInstructedAmount instructedAmount = default(OBWriteDomesticScheduled2DataInitiationInstructedAmount))
        {
            // to ensure "instructionIdentification" is required (not null)
            if (instructionIdentification == null)
            {
                throw new InvalidDataException("instructionIdentification is a required property for OBWriteInternationalScheduledResponse3DataInitiation and cannot be null");
            }
            else
            {
                this.InstructionIdentification = instructionIdentification;
            }
            // to ensure "currencyOfTransfer" is required (not null)
            if (currencyOfTransfer == null)
            {
                throw new InvalidDataException("currencyOfTransfer is a required property for OBWriteInternationalScheduledResponse3DataInitiation and cannot be null");
            }
            else
            {
                this.CurrencyOfTransfer = currencyOfTransfer;
            }
            // to ensure "creditorAccount" is required (not null)
            if (creditorAccount == null)
            {
                throw new InvalidDataException("creditorAccount is a required property for OBWriteInternationalScheduledResponse3DataInitiation and cannot be null");
            }
            else
            {
                this.CreditorAccount = creditorAccount;
            }
            // to ensure "requestedExecutionDateTime" is required (not null)
            if (requestedExecutionDateTime == null)
            {
                throw new InvalidDataException("requestedExecutionDateTime is a required property for OBWriteInternationalScheduledResponse3DataInitiation and cannot be null");
            }
            else
            {
                this.RequestedExecutionDateTime = requestedExecutionDateTime;
            }
            // to ensure "instructedAmount" is required (not null)
            if (instructedAmount == null)
            {
                throw new InvalidDataException("instructedAmount is a required property for OBWriteInternationalScheduledResponse3DataInitiation and cannot be null");
            }
            else
            {
                this.InstructedAmount = instructedAmount;
            }
            this.SupplementaryData = supplementaryData;
            this.DebtorAccount = debtorAccount;
            this.CreditorAgent = creditorAgent;
            this.EndToEndIdentification = endToEndIdentification;
            this.Purpose = purpose;
            this.ChargeBearer = chargeBearer;
            this.InstructionPriority = instructionPriority;
            this.LocalInstrument = localInstrument;
            this.RemittanceInformation = remittanceInformation;
            this.ExchangeRateInformation = exchangeRateInformation;
            this.Creditor = creditor;
        }
        
        /// <summary>
        /// Gets or Sets SupplementaryData
        /// </summary>
        [DataMember(Name="SupplementaryData", EmitDefaultValue=false)]
        public OBSupplementaryData1 SupplementaryData { get; set; }

        /// <summary>
        /// Gets or Sets DebtorAccount
        /// </summary>
        [DataMember(Name="DebtorAccount", EmitDefaultValue=false)]
        public OBWriteFile2DataInitiationDebtorAccount DebtorAccount { get; set; }

        /// <summary>
        /// Gets or Sets CreditorAgent
        /// </summary>
        [DataMember(Name="CreditorAgent", EmitDefaultValue=false)]
        public OBWriteInternationalConsent3DataInitiationCreditorAgent CreditorAgent { get; set; }

        /// <summary>
        /// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain. Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction. OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
        /// </summary>
        /// <value>Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain. Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction. OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.</value>
        [DataMember(Name="EndToEndIdentification", EmitDefaultValue=false)]
        public string EndToEndIdentification { get; set; }

        /// <summary>
        /// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction. Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
        /// </summary>
        /// <value>Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction. Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.</value>
        [DataMember(Name="InstructionIdentification", EmitDefaultValue=false)]
        public string InstructionIdentification { get; set; }

        /// <summary>
        /// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor&#39;s account.
        /// </summary>
        /// <value>Specifies the currency of the to be transferred amount, which is different from the currency of the debtor&#39;s account.</value>
        [DataMember(Name="CurrencyOfTransfer", EmitDefaultValue=false)]
        public string CurrencyOfTransfer { get; set; }

        /// <summary>
        /// Gets or Sets CreditorAccount
        /// </summary>
        [DataMember(Name="CreditorAccount", EmitDefaultValue=false)]
        public OBWriteDomesticScheduled2DataInitiationCreditorAccount CreditorAccount { get; set; }

        /// <summary>
        /// Specifies the external purpose code in the format of character string with a maximum length of 4 characters. The list of valid codes is an external code list published separately. External code sets can be downloaded from www.iso20022.org.
        /// </summary>
        /// <value>Specifies the external purpose code in the format of character string with a maximum length of 4 characters. The list of valid codes is an external code list published separately. External code sets can be downloaded from www.iso20022.org.</value>
        [DataMember(Name="Purpose", EmitDefaultValue=false)]
        public string Purpose { get; set; }



        /// <summary>
        /// Date at which the initiating party requests the clearing agent to process the payment.  Usage: This is the date on which the debtor&#39;s account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
        /// </summary>
        /// <value>Date at which the initiating party requests the clearing agent to process the payment.  Usage: This is the date on which the debtor&#39;s account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00</value>
        [DataMember(Name="RequestedExecutionDateTime", EmitDefaultValue=false)]
        public DateTime? RequestedExecutionDateTime { get; set; }

        /// <summary>
        /// User community specific instrument. Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
        /// </summary>
        /// <value>User community specific instrument. Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.</value>
        [DataMember(Name="LocalInstrument", EmitDefaultValue=false)]
        public string LocalInstrument { get; set; }

        /// <summary>
        /// Gets or Sets RemittanceInformation
        /// </summary>
        [DataMember(Name="RemittanceInformation", EmitDefaultValue=false)]
        public OBWriteFile2DataInitiationRemittanceInformation RemittanceInformation { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeRateInformation
        /// </summary>
        [DataMember(Name="ExchangeRateInformation", EmitDefaultValue=false)]
        public OBWriteInternationalConsent3DataInitiationExchangeRateInformation ExchangeRateInformation { get; set; }

        /// <summary>
        /// Gets or Sets Creditor
        /// </summary>
        [DataMember(Name="Creditor", EmitDefaultValue=false)]
        public OBWriteInternationalConsent3DataInitiationCreditor Creditor { get; set; }

        /// <summary>
        /// Gets or Sets InstructedAmount
        /// </summary>
        [DataMember(Name="InstructedAmount", EmitDefaultValue=false)]
        public OBWriteDomesticScheduled2DataInitiationInstructedAmount InstructedAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OBWriteInternationalScheduledResponse3DataInitiation {\n");
            sb.Append("  SupplementaryData: ").Append(SupplementaryData).Append("\n");
            sb.Append("  DebtorAccount: ").Append(DebtorAccount).Append("\n");
            sb.Append("  CreditorAgent: ").Append(CreditorAgent).Append("\n");
            sb.Append("  EndToEndIdentification: ").Append(EndToEndIdentification).Append("\n");
            sb.Append("  InstructionIdentification: ").Append(InstructionIdentification).Append("\n");
            sb.Append("  CurrencyOfTransfer: ").Append(CurrencyOfTransfer).Append("\n");
            sb.Append("  CreditorAccount: ").Append(CreditorAccount).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  ChargeBearer: ").Append(ChargeBearer).Append("\n");
            sb.Append("  InstructionPriority: ").Append(InstructionPriority).Append("\n");
            sb.Append("  RequestedExecutionDateTime: ").Append(RequestedExecutionDateTime).Append("\n");
            sb.Append("  LocalInstrument: ").Append(LocalInstrument).Append("\n");
            sb.Append("  RemittanceInformation: ").Append(RemittanceInformation).Append("\n");
            sb.Append("  ExchangeRateInformation: ").Append(ExchangeRateInformation).Append("\n");
            sb.Append("  Creditor: ").Append(Creditor).Append("\n");
            sb.Append("  InstructedAmount: ").Append(InstructedAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OBWriteInternationalScheduledResponse3DataInitiation);
        }

        /// <summary>
        /// Returns true if OBWriteInternationalScheduledResponse3DataInitiation instances are equal
        /// </summary>
        /// <param name="input">Instance of OBWriteInternationalScheduledResponse3DataInitiation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OBWriteInternationalScheduledResponse3DataInitiation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SupplementaryData == input.SupplementaryData ||
                    (this.SupplementaryData != null &&
                    this.SupplementaryData.Equals(input.SupplementaryData))
                ) && 
                (
                    this.DebtorAccount == input.DebtorAccount ||
                    (this.DebtorAccount != null &&
                    this.DebtorAccount.Equals(input.DebtorAccount))
                ) && 
                (
                    this.CreditorAgent == input.CreditorAgent ||
                    (this.CreditorAgent != null &&
                    this.CreditorAgent.Equals(input.CreditorAgent))
                ) && 
                (
                    this.EndToEndIdentification == input.EndToEndIdentification ||
                    (this.EndToEndIdentification != null &&
                    this.EndToEndIdentification.Equals(input.EndToEndIdentification))
                ) && 
                (
                    this.InstructionIdentification == input.InstructionIdentification ||
                    (this.InstructionIdentification != null &&
                    this.InstructionIdentification.Equals(input.InstructionIdentification))
                ) && 
                (
                    this.CurrencyOfTransfer == input.CurrencyOfTransfer ||
                    (this.CurrencyOfTransfer != null &&
                    this.CurrencyOfTransfer.Equals(input.CurrencyOfTransfer))
                ) && 
                (
                    this.CreditorAccount == input.CreditorAccount ||
                    (this.CreditorAccount != null &&
                    this.CreditorAccount.Equals(input.CreditorAccount))
                ) && 
                (
                    this.Purpose == input.Purpose ||
                    (this.Purpose != null &&
                    this.Purpose.Equals(input.Purpose))
                ) && 
                (
                    this.ChargeBearer == input.ChargeBearer ||
                    (this.ChargeBearer != null &&
                    this.ChargeBearer.Equals(input.ChargeBearer))
                ) && 
                (
                    this.InstructionPriority == input.InstructionPriority ||
                    (this.InstructionPriority != null &&
                    this.InstructionPriority.Equals(input.InstructionPriority))
                ) && 
                (
                    this.RequestedExecutionDateTime == input.RequestedExecutionDateTime ||
                    (this.RequestedExecutionDateTime != null &&
                    this.RequestedExecutionDateTime.Equals(input.RequestedExecutionDateTime))
                ) && 
                (
                    this.LocalInstrument == input.LocalInstrument ||
                    (this.LocalInstrument != null &&
                    this.LocalInstrument.Equals(input.LocalInstrument))
                ) && 
                (
                    this.RemittanceInformation == input.RemittanceInformation ||
                    (this.RemittanceInformation != null &&
                    this.RemittanceInformation.Equals(input.RemittanceInformation))
                ) && 
                (
                    this.ExchangeRateInformation == input.ExchangeRateInformation ||
                    (this.ExchangeRateInformation != null &&
                    this.ExchangeRateInformation.Equals(input.ExchangeRateInformation))
                ) && 
                (
                    this.Creditor == input.Creditor ||
                    (this.Creditor != null &&
                    this.Creditor.Equals(input.Creditor))
                ) && 
                (
                    this.InstructedAmount == input.InstructedAmount ||
                    (this.InstructedAmount != null &&
                    this.InstructedAmount.Equals(input.InstructedAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SupplementaryData != null)
                    hashCode = hashCode * 59 + this.SupplementaryData.GetHashCode();
                if (this.DebtorAccount != null)
                    hashCode = hashCode * 59 + this.DebtorAccount.GetHashCode();
                if (this.CreditorAgent != null)
                    hashCode = hashCode * 59 + this.CreditorAgent.GetHashCode();
                if (this.EndToEndIdentification != null)
                    hashCode = hashCode * 59 + this.EndToEndIdentification.GetHashCode();
                if (this.InstructionIdentification != null)
                    hashCode = hashCode * 59 + this.InstructionIdentification.GetHashCode();
                if (this.CurrencyOfTransfer != null)
                    hashCode = hashCode * 59 + this.CurrencyOfTransfer.GetHashCode();
                if (this.CreditorAccount != null)
                    hashCode = hashCode * 59 + this.CreditorAccount.GetHashCode();
                if (this.Purpose != null)
                    hashCode = hashCode * 59 + this.Purpose.GetHashCode();
                if (this.ChargeBearer != null)
                    hashCode = hashCode * 59 + this.ChargeBearer.GetHashCode();
                if (this.InstructionPriority != null)
                    hashCode = hashCode * 59 + this.InstructionPriority.GetHashCode();
                if (this.RequestedExecutionDateTime != null)
                    hashCode = hashCode * 59 + this.RequestedExecutionDateTime.GetHashCode();
                if (this.LocalInstrument != null)
                    hashCode = hashCode * 59 + this.LocalInstrument.GetHashCode();
                if (this.RemittanceInformation != null)
                    hashCode = hashCode * 59 + this.RemittanceInformation.GetHashCode();
                if (this.ExchangeRateInformation != null)
                    hashCode = hashCode * 59 + this.ExchangeRateInformation.GetHashCode();
                if (this.Creditor != null)
                    hashCode = hashCode * 59 + this.Creditor.GetHashCode();
                if (this.InstructedAmount != null)
                    hashCode = hashCode * 59 + this.InstructedAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EndToEndIdentification (string) maxLength
            if(this.EndToEndIdentification != null && this.EndToEndIdentification.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndToEndIdentification, length must be less than 35.", new [] { "EndToEndIdentification" });
            }

            // EndToEndIdentification (string) minLength
            if(this.EndToEndIdentification != null && this.EndToEndIdentification.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndToEndIdentification, length must be greater than 1.", new [] { "EndToEndIdentification" });
            }

            // InstructionIdentification (string) maxLength
            if(this.InstructionIdentification != null && this.InstructionIdentification.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstructionIdentification, length must be less than 35.", new [] { "InstructionIdentification" });
            }

            // InstructionIdentification (string) minLength
            if(this.InstructionIdentification != null && this.InstructionIdentification.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstructionIdentification, length must be greater than 1.", new [] { "InstructionIdentification" });
            }

            // CurrencyOfTransfer (string) pattern
            Regex regexCurrencyOfTransfer = new Regex(@"^[A-Z]{3,3}$", RegexOptions.CultureInvariant);
            if (false == regexCurrencyOfTransfer.Match(this.CurrencyOfTransfer).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrencyOfTransfer, must match a pattern of " + regexCurrencyOfTransfer, new [] { "CurrencyOfTransfer" });
            }

            yield break;
        }
    }

}
