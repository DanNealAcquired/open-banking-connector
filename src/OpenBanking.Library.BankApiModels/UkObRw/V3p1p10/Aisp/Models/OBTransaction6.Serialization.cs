// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace FinnovationLabs.OpenBanking.Library.BankApiModels.UkObRw.V3p1p10.Aisp.Models
{
    public partial class OBTransaction6
    {
        internal static OBTransaction6 DeserializeOBTransaction6(JsonElement element)
        {
            string accountId = default;
            Optional<string> transactionId = default;
            Optional<string> transactionReference = default;
            Optional<IReadOnlyList<string>> statementReference = default;
            OBCreditDebitCode1Enum creditDebitIndicator = default;
            OBEntryStatus1CodeEnum status = default;
            Optional<OBTransactionMutability1CodeEnum> transactionMutability = default;
            DateTimeOffset bookingDateTime = default;
            Optional<DateTimeOffset> valueDateTime = default;
            Optional<string> transactionInformation = default;
            Optional<string> addressLine = default;
            OBActiveOrHistoricCurrencyAndAmount9 amount = default;
            Optional<OBActiveOrHistoricCurrencyAndAmount10> chargeAmount = default;
            Optional<OBCurrencyExchange5> currencyExchange = default;
            Optional<OBBankTransactionCodeStructure1> bankTransactionCode = default;
            Optional<ProprietaryBankTransactionCodeStructure1> proprietaryBankTransactionCode = default;
            Optional<OBTransactionCashBalance> balance = default;
            Optional<OBMerchantDetails1> merchantDetails = default;
            Optional<OBBranchAndFinancialInstitutionIdentification61> creditorAgent = default;
            Optional<OBCashAccount60> creditorAccount = default;
            Optional<OBBranchAndFinancialInstitutionIdentification62> debtorAgent = default;
            Optional<OBCashAccount61> debtorAccount = default;
            Optional<OBTransactionCardInstrument1> cardInstrument = default;
            Optional<IReadOnlyDictionary<string, object>> supplementaryData = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("AccountId"))
                {
                    accountId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("TransactionId"))
                {
                    transactionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("TransactionReference"))
                {
                    transactionReference = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("StatementReference"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    statementReference = array;
                    continue;
                }
                if (property.NameEquals("CreditDebitIndicator"))
                {
                    creditDebitIndicator = property.Value.GetString().ToOBCreditDebitCode1Enum();
                    continue;
                }
                if (property.NameEquals("Status"))
                {
                    status = property.Value.GetString().ToOBEntryStatus1CodeEnum();
                    continue;
                }
                if (property.NameEquals("TransactionMutability"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    transactionMutability = property.Value.GetString().ToOBTransactionMutability1CodeEnum();
                    continue;
                }
                if (property.NameEquals("BookingDateTime"))
                {
                    bookingDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("ValueDateTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    valueDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("TransactionInformation"))
                {
                    transactionInformation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("AddressLine"))
                {
                    addressLine = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Amount"))
                {
                    amount = OBActiveOrHistoricCurrencyAndAmount9.DeserializeOBActiveOrHistoricCurrencyAndAmount9(property.Value);
                    continue;
                }
                if (property.NameEquals("ChargeAmount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    chargeAmount = OBActiveOrHistoricCurrencyAndAmount10.DeserializeOBActiveOrHistoricCurrencyAndAmount10(property.Value);
                    continue;
                }
                if (property.NameEquals("CurrencyExchange"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    currencyExchange = OBCurrencyExchange5.DeserializeOBCurrencyExchange5(property.Value);
                    continue;
                }
                if (property.NameEquals("BankTransactionCode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    bankTransactionCode = OBBankTransactionCodeStructure1.DeserializeOBBankTransactionCodeStructure1(property.Value);
                    continue;
                }
                if (property.NameEquals("ProprietaryBankTransactionCode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    proprietaryBankTransactionCode = ProprietaryBankTransactionCodeStructure1.DeserializeProprietaryBankTransactionCodeStructure1(property.Value);
                    continue;
                }
                if (property.NameEquals("Balance"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    balance = OBTransactionCashBalance.DeserializeOBTransactionCashBalance(property.Value);
                    continue;
                }
                if (property.NameEquals("MerchantDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    merchantDetails = OBMerchantDetails1.DeserializeOBMerchantDetails1(property.Value);
                    continue;
                }
                if (property.NameEquals("CreditorAgent"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    creditorAgent = OBBranchAndFinancialInstitutionIdentification61.DeserializeOBBranchAndFinancialInstitutionIdentification61(property.Value);
                    continue;
                }
                if (property.NameEquals("CreditorAccount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    creditorAccount = OBCashAccount60.DeserializeOBCashAccount60(property.Value);
                    continue;
                }
                if (property.NameEquals("DebtorAgent"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    debtorAgent = OBBranchAndFinancialInstitutionIdentification62.DeserializeOBBranchAndFinancialInstitutionIdentification62(property.Value);
                    continue;
                }
                if (property.NameEquals("DebtorAccount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    debtorAccount = OBCashAccount61.DeserializeOBCashAccount61(property.Value);
                    continue;
                }
                if (property.NameEquals("CardInstrument"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    cardInstrument = OBTransactionCardInstrument1.DeserializeOBTransactionCardInstrument1(property.Value);
                    continue;
                }
                if (property.NameEquals("SupplementaryData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, object> dictionary = new Dictionary<string, object>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetObject());
                    }
                    supplementaryData = dictionary;
                    continue;
                }
            }
            return new OBTransaction6(accountId, transactionId.Value, transactionReference.Value, Optional.ToList(statementReference), creditDebitIndicator, status, Optional.ToNullable(transactionMutability), bookingDateTime, Optional.ToNullable(valueDateTime), transactionInformation.Value, addressLine.Value, amount, chargeAmount.Value, currencyExchange.Value, bankTransactionCode.Value, proprietaryBankTransactionCode.Value, balance.Value, merchantDetails.Value, creditorAgent.Value, creditorAccount.Value, debtorAgent.Value, debtorAccount.Value, cardInstrument.Value, Optional.ToDictionary(supplementaryData));
        }
    }
}
