//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using FinnovationLabs.OpenBanking.Library.BankApiModels.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace FinnovationLabs.OpenBanking.Library.BankApiModels.UkObRw.V3p1p11.NSwagVrp.Models
{
    using System = global::System;

    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBError1
    {
        /// <summary>
        /// Low level textual error code, e.g., UK.OBIE.Field.Missing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string ErrorCode { get; set; }

        /// <summary>
        /// A description of the error that occurred. e.g., 'A mandatory field isn't supplied' or 'RequestedExecutionDateTime must be in future'
        /// <br/>OBIE doesn't standardise this field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public required string Message { get; set; }

        /// <summary>
        /// Recommended but optional reference to the JSON Path of the field with error, e.g., Data.Initiation.InstructedAmount.Currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string? Path { get; set; } = default!;

        /// <summary>
        /// URL to help remediate the problem, or provide more information, or to API Reference, or help etc
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Url { get; set; } = default!;

    }

    /// <summary>
    /// An array of detail error codes, and messages, and URLs to documentation to help remediation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBErrorResponse1
    {
        /// <summary>
        /// High level textual error code, to help categorize the errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string Code { get; set; }

        /// <summary>
        /// A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Brief Error message, e.g., 'There is something wrong with the request parameters provided'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public required string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("Errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<OBError1> Errors { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBDomesticVRPConsentResponse
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBRisk1 Risk { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Meta Meta { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBDomesticVRPConsentRequest
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data2 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBRisk1 Risk { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBDomesticVRPControlParameters
    {
        /// <summary>
        /// ^ Start date time for which the consent remains valid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ValidFromDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ValidFromDateTime { get; set; } = default!;

        /// <summary>
        /// ^ End date time for which the consent remains valid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ValidToDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ValidToDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MaximumIndividualAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount MaximumIndividualAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("PeriodicLimits", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<PeriodicLimits> PeriodicLimits { get; set; }

        /// <summary>
        /// ^ The types of payments that can be made under this VRP consent. This can be used to indicate whether this include sweeping payment or other ecommerce payments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("VRPType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<string> VRPType { get; set; }

        /// <summary>
        /// ^ Indicates that the PSU authentication methods supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PSUAuthenticationMethods", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<string> PSUAuthenticationMethods { get; set; }

        /// <summary>
        /// ^ Indicates interaction type, currently if customer is present or not present.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PSUInteractionTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<OBVRPInteractionTypes>? PSUInteractionTypes { get; set; } = default!;

        /// <summary>
        /// ^ Additional information that can not be captured in the structured fields and/or any other specific block
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? SupplementaryData { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBDomesticVRPInitiation
    {
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccountDebtorWithName? DebtorAccount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccountCreditor3? CreditorAccount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorPostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress6? CreditorPostalAddress { get; set; } = default!;

        /// <summary>
        /// ^ Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RemittanceInformation? RemittanceInformation { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBCashAccountDebtorWithName
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        /// <summary>
        /// ^ Identification assigned by an institution to identify an account. This identification is known by the account owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// ^ Name of the account, as assigned by the account servicing institution.  Usage The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// ^ This is secondary identification of the account, as assigned by the account servicing institution.  This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBCashAccountCreditor3
    {
        /// <summary>
        /// Name of the identification scheme, in a coded form as published in an external list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        /// <summary>
        /// Identification assigned by an institution to identify an account. This identification is known by the account owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// Name of the account, as assigned by the account servicing institution.
        /// <br/>Usage: the account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>The account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// This is secondary identification of the account, as assigned by the account servicing institution.
        /// <br/>This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBBranchAndFinancialInstitutionIdentification6
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        /// <summary>
        /// ^ Unique and unambiguous identification of a financial institution or a branch of a financial institution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        /// <summary>
        /// ^ Name by which an agent is known and which is usually used to identify that agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress6? PostalAddress { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBDomesticVRPRequest
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data3 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBRisk1 Risk { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBDomesticVRPResponse
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data4 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBRisk1 Risk { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Meta Meta { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBDomesticVRPDetails
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Data5? Data { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The OBVRPFundsConfirmationRequest object must be used to request funds availability for a specific amount in the Debtor Account included in the VRP consents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBVRPFundsConfirmationRequest
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data6 Data { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The confirmation of funds response contains the result of a funds availability check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBVRPFundsConfirmationResponse
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data7 Data { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Availability result, clearly indicating the availability of funds given the Amount in the request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBPAFundsAvailableResult1
    {
        /// <summary>
        /// Date and time at which the funds availability check was generated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FundsAvailableDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset FundsAvailableDateTime { get; set; }

        /// <summary>
        /// Availability result, clearly indicating the availability of funds given the Amount in the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FundsAvailable", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBPAFundsAvailableResult1FundsAvailable FundsAvailable { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBCharge2
    {
        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBChargeBearerType1Code ChargeBearer { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBExternalStatus2Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Authorised")]
        Authorised = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AwaitingFurtherAuthorisation")]
        AwaitingFurtherAuthorisation = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 2,

    }

    /// <summary>
    /// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBChargeBearerType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BorneByCreditor")]
        BorneByCreditor = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BorneByDebtor")]
        BorneByDebtor = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FollowingServiceLevel")]
        FollowingServiceLevel = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Shared")]
        Shared = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBDomesticVRPInstruction
    {
        /// <summary>
        /// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
        /// <br/>Usage: the instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction.
        /// <br/>It can be included in several messages related to the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string InstructionIdentification { get; set; }

        /// <summary>
        /// Unique identification assigned by the initiating party to unambiguously identify the transaction.
        /// <br/>This identification is passed on, unchanged, throughout the entire end-to-end chain.
        /// <br/>Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction.
        /// <br/>It can be included in several messages related to the transaction.
        /// <br/>OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EndToEndIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string EndToEndIdentification { get; set; }

        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBVRPRemittanceInformation? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LocalInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalInstrument { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount InstructedAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("CreditorPostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress6? CreditorPostalAddress { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBCashAccountCreditor3 CreditorAccount { get; set; }

        /// <summary>
        /// Additional information that can not be captured in the structured fields and/or any other specific block.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? SupplementaryData { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBVRPRemittanceInformation
    {
        /// <summary>
        /// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Unstructured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Unstructured { get; set; } = default!;

        /// <summary>
        /// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction. The PISP must populate this with the same value as specified in the `Data.Initiation.RemittanceInformation.Reference` of the consent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the type of account (personal or business).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBExternalAccountType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Business")]
        Business = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Personal")]
        Personal = 1,

    }

    /// <summary>
    /// Specifies the extended type of account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBExternalExtendedAccountType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Business")]
        Business = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BusinessSavingsAccount")]
        BusinessSavingsAccount = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Charity")]
        Charity = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Collection")]
        Collection = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Corporate")]
        Corporate = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Ewallet")]
        Ewallet = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Government")]
        Government = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Investment")]
        Investment = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ISA")]
        ISA = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"JointPersonal")]
        JointPersonal = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Pension")]
        Pension = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Personal")]
        Personal = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PersonalSavingsAccount")]
        PersonalSavingsAccount = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Premier")]
        Premier = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Wealth")]
        Wealth = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBActiveOrHistoricCurrencyAndAmount
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBExternalPaymentChargeType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UK.OBIE.CHAPSOut")]
        UK_OBIE_CHAPSOut = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UK.OBIE.BalanceTransferOut")]
        UK_OBIE_BalanceTransferOut = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UK.OBIE.MoneyTransferOut")]
        UK_OBIE_MoneyTransferOut = 2,

    }

    /// <summary>
    /// Information that locates and identifies a specific address, as defined by postal services.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBPostalAddress6
    {
        [Newtonsoft.Json.JsonProperty("AddressType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBAddressTypeCode? AddressType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Department", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? Department { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SubDepartment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? SubDepartment { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StreetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? StreetName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BuildingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string? BuildingNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string? PostCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TownName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? TownName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CountrySubDivision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? CountrySubDivision { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{2,2}$")]
        public string? Country { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AddressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(7)]
        public System.Collections.Generic.ICollection<string>? AddressLine { get; set; } = default!;

    }

    /// <summary>
    /// Identifies the nature of the postal address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBAddressTypeCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Business")]
        Business = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Correspondence")]
        Correspondence = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DeliveryTo")]
        DeliveryTo = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MailTo")]
        MailTo = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"POBox")]
        POBox = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Postal")]
        Postal = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Residential")]
        Residential = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Statement")]
        Statement = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBVRPInteractionTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"InSession")]
        InSession = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OffSession")]
        OffSession = 1,

    }

    /// <summary>
    /// The Risk section is sent by the initiating party to the ASPSP.
    /// <br/>It is used to specify additional details for risk scoring for Payments.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBRisk1
    {
        /// <summary>
        /// Specifies the payment context
        /// <br/>* BillPayment - @deprecated
        /// <br/>* EcommerceGoods - @deprecated
        /// <br/>* EcommerceServices - @deprecated
        /// <br/>* Other - @deprecated
        /// <br/>* PartyToParty - @deprecated
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PaymentContextCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBRisk1PaymentContextCode? PaymentContextCode { get; set; } = default!;

        /// <summary>
        /// Category code conform to ISO 18245, related to the type of services or goods the merchant provides for the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MerchantCategoryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 3)]
        public string? MerchantCategoryCode { get; set; } = default!;

        /// <summary>
        /// The unique customer identifier of the PSU with the merchant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MerchantCustomerIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? MerchantCustomerIdentification { get; set; } = default!;

        /// <summary>
        /// Indicates if Payee has a contractual relationship with the PISP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ContractPresentIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ContractPresentIndicator { get; set; } = default!;

        /// <summary>
        /// Indicates if Payee has a contractual relationship with the PISP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ContractPresentInidicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ContractPresentInidicator { get; set; } = default!;
        
        public void AdjustBeforeSendToBank(bool preferMisspelt)
        {
            if (ContractPresentInidicator is not null)
            {
                throw new Exception("ContractPresentInidicator should be null.");
            }
            if (preferMisspelt)
            {
                ContractPresentInidicator = ContractPresentIndicator;
                ContractPresentIndicator = null;
            }
            
        }

        public void AdjustAfterReceiveFromBank()
        {
            if (ContractPresentIndicator is not null &&
                ContractPresentInidicator is not null)
            {
                throw new Exception("Both ContractPresentIndicator and ContractPresentInidicator received.");
            }

            if (ContractPresentInidicator is not null)
            {
                ContractPresentIndicator = ContractPresentInidicator;
                ContractPresentInidicator = null;
            }
        }
        
        /// <summary>
        /// Indicates if PISP has immutably prepopulated payment details in for the PSU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BeneficiaryPrepopulatedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BeneficiaryPrepopulatedIndicator { get; set; } = default!;

        /// <summary>
        /// Category code, related to the type of services or goods that corresponds to the underlying purpose of the payment that conforms to Recommended UK Purpose Code in ISO 20022 Payment Messaging List
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PaymentPurposeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 3)]
        public string? PaymentPurposeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BeneficiaryAccountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalExtendedAccountType1Code? BeneficiaryAccountType { get; set; } = default!;

        /// <summary>
        /// Information that locates and identifies a specific address,
        /// <br/>as defined by postal services or in free format text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DeliveryAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeliveryAddress? DeliveryAddress { get; set; } = default!;

    }

    /// <summary>
    /// Links relevant to the payload
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Links
    {
        [Newtonsoft.Json.JsonProperty("Self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.Uri Self { get; set; }

        [Newtonsoft.Json.JsonProperty("First", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri? First { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri? Prev { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri? Next { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Last", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri? Last { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Meta Data relevant to the payload. At present no fields are used for VRP.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Meta
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data
    {
        /// <summary>
        /// Indicates whether information about RefundAccount should be included in the payment response.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReadRefundAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DataReadRefundAccount? ReadRefundAccount { get; set; } = default!;

        /// <summary>
        /// Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// Date and time at which the resource was created.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset CreationDateTime { get; set; }

        /// <summary>
        /// Specifies the status of resource in code form.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required DataStatus Status { get; set; }

        /// <summary>
        /// Date and time at which the resource status was updated.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset StatusUpdateDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("ControlParameters", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBDomesticVRPControlParameters ControlParameters { get; set; }

        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBDomesticVRPInitiation Initiation { get; set; }

        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount? DebtorAccount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data2
    {
        /// <summary>
        /// Indicates whether information about RefundAccount should be included in the payment response.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReadRefundAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Data2ReadRefundAccount? ReadRefundAccount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ControlParameters", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBDomesticVRPControlParameters ControlParameters { get; set; }

        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBDomesticVRPInitiation Initiation { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PeriodicLimits
    {
        /// <summary>
        /// ^ Period type for this period limit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PeriodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required PeriodicLimitsPeriodType PeriodType { get; set; }

        /// <summary>
        /// ^ Specifies whether the period starts on the date of consent creation or lines up with a calendar
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PeriodAlignment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required PeriodicLimitsPeriodAlignment PeriodAlignment { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record RemittanceInformation
    {
        /// <summary>
        /// ^ Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Unstructured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Unstructured { get; set; } = default!;

        /// <summary>
        /// ^ Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction. Usage - If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money. If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data3
    {
        /// <summary>
        /// Identifier for the Domestic VRP Consent that this payment is made under.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        public required string ConsentId { get; set; }

        [Newtonsoft.Json.JsonProperty("PSUAuthenticationMethod", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required string PSUAuthenticationMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("PSUInteractionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBVRPInteractionTypes? PSUInteractionType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("VRPType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VRPType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBDomesticVRPInitiation Initiation { get; set; }

        [Newtonsoft.Json.JsonProperty("Instruction", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBDomesticVRPInstruction Instruction { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data4
    {
        /// <summary>
        /// Unique identification as assigned by the ASPSP to uniquely identify the domestic payment resource.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DomesticVRPId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string DomesticVRPId { get; set; }

        /// <summary>
        /// Identifier for the Domestic VRP Consent that this payment is made under.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// Date and time at which the resource was created.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset CreationDateTime { get; set; }

        /// <summary>
        /// Specifies the status of the payment information group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Data4Status Status { get; set; }

        [Newtonsoft.Json.JsonProperty("StatusReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StatusReason { get; set; } = default!;

        /// <summary>
        /// Description related to provided Status/StatusReason
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusReasonDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? StatusReasonDescription { get; set; } = default!;

        /// <summary>
        /// Date and time at which the resource status was updated.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset StatusUpdateDateTime { get; set; }

        /// <summary>
        /// Expected execution date and time for the payment resource.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpectedExecutionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedExecutionDateTime { get; set; } = default!;

        /// <summary>
        /// Expected settlement date and time for the payment resource.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpectedSettlementDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedSettlementDateTime { get; set; } = default!;

        /// <summary>
        /// Only included in the response if `Data.ReadRefundAccount` is set to `Yes` in the consent.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonConverter(
            typeof(DomesticVrpRefundConverter),
            JsonConverterLabel.DomesticVrpRefund)]
        [Newtonsoft.Json.JsonProperty("Refund", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccountDebtorWithName? Refund { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Charges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Charges>? Charges { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBDomesticVRPInitiation Initiation { get; set; }

        [Newtonsoft.Json.JsonProperty("Instruction", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBDomesticVRPInstruction Instruction { get; set; }

        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccountDebtorWithName? DebtorAccount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data5
    {
        [Newtonsoft.Json.JsonProperty("PaymentStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PaymentStatus>? PaymentStatus { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data6
    {
        /// <summary>
        /// Unique identification as assigned by the ASPSP to uniquely identify the funds confirmation consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// Unique reference, as assigned by the PISP, to unambiguously refer to the request related to the payment transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Reference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount InstructedAmount { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data7
    {
        /// <summary>
        /// Unique identification as assigned by the ASPSP to uniquely identify the funds confirmation resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FundsConfirmationId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string FundsConfirmationId { get; set; }

        /// <summary>
        /// Unique identification as assigned by the ASPSP to uniquely identify the funds confirmation consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// Date and time at which the resource was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset CreationDateTime { get; set; }

        /// <summary>
        /// Unique reference, as assigned by the CBPII, to unambiguously refer to the request related to the payment transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Reference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FundsAvailableResult", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBPAFundsAvailableResult1 FundsAvailableResult { get; set; }

        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount InstructedAmount { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBPAFundsAvailableResult1FundsAvailable
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Available")]
        Available = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NotAvailable")]
        NotAvailable = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBRisk1PaymentContextCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BillingGoodsAndServicesInAdvance")]
        BillingGoodsAndServicesInAdvance = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BillingGoodsAndServicesInArrears")]
        BillingGoodsAndServicesInArrears = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PispPayee")]
        PispPayee = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EcommerceMerchantInitiatedPayment")]
        EcommerceMerchantInitiatedPayment = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FaceToFacePointOfSale")]
        FaceToFacePointOfSale = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TransferToSelf")]
        TransferToSelf = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TransferToThirdParty")]
        TransferToThirdParty = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"BillPayment")]
        BillPayment = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"EcommerceGoods")]
        EcommerceGoods = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"EcommerceServices")]
        EcommerceServices = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PartyToParty")]
        PartyToParty = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DeliveryAddress
    {
        [Newtonsoft.Json.JsonProperty("AddressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(2)]
        public System.Collections.Generic.ICollection<string>? AddressLine { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StreetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? StreetName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BuildingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string? BuildingNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string? PostCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TownName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string TownName { get; set; }

        [Newtonsoft.Json.JsonProperty("CountrySubDivision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? CountrySubDivision { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{2,2}$")]
        public required string Country { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DataReadRefundAccount
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Yes")]
        Yes = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"No")]
        No = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DataStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Authorised")]
        Authorised = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AwaitingAuthorisation")]
        AwaitingAuthorisation = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount : OBCashAccountDebtorWithName
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data2ReadRefundAccount
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Yes")]
        Yes = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"No")]
        No = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PeriodicLimitsPeriodType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Fortnight")]
        Fortnight = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Half-year")]
        HalfYear = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PeriodicLimitsPeriodAlignment
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Consent")]
        Consent = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Calendar")]
        Calendar = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data4Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AcceptedCreditSettlementCompleted")]
        AcceptedCreditSettlementCompleted = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AcceptedWithoutPosting")]
        AcceptedWithoutPosting = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AcceptedSettlementCompleted")]
        AcceptedSettlementCompleted = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AcceptedSettlementInProcess")]
        AcceptedSettlementInProcess = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 5,

    }

    /// <summary>
    /// Set of elements used to provide details of a charge for the payment initiation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Charges
    {
        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBChargeBearerType1Code ChargeBearer { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBExternalPaymentChargeType1Code Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PaymentStatus
    {
        /// <summary>
        /// Unique identifier for the transaction within an servicing institution. This identifier is both unique and immutable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PaymentTransactionId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(210, MinimumLength = 1)]
        public required string PaymentTransactionId { get; set; }

        /// <summary>
        /// Status of a transfer, as assigned by the transaction administrator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required PaymentStatusStatus Status { get; set; }

        /// <summary>
        /// Date and time at which the status was assigned to the transfer.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset StatusUpdateDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("StatusDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatusDetail? StatusDetail { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PaymentStatusStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Accepted")]
        Accepted = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AcceptedCancellationRequest")]
        AcceptedCancellationRequest = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AcceptedCreditSettlementCompleted")]
        AcceptedCreditSettlementCompleted = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AcceptedCustomerProfile")]
        AcceptedCustomerProfile = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AcceptedFundsChecked")]
        AcceptedFundsChecked = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AcceptedSettlementCompleted")]
        AcceptedSettlementCompleted = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AcceptedSettlementInProcess")]
        AcceptedSettlementInProcess = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"AcceptedTechnicalValidation")]
        AcceptedTechnicalValidation = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AcceptedWithChange")]
        AcceptedWithChange = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AcceptedWithoutPosting")]
        AcceptedWithoutPosting = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"NoCancellationProcess")]
        NoCancellationProcess = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PartiallyAcceptedCancellationRequest")]
        PartiallyAcceptedCancellationRequest = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PartiallyAcceptedTechnicalCorrect")]
        PartiallyAcceptedTechnicalCorrect = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentCancelled")]
        PaymentCancelled = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"PendingCancellationRequest")]
        PendingCancellationRequest = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"Received")]
        Received = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"RejectedCancellationRequest")]
        RejectedCancellationRequest = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StatusDetail
    {
        [Newtonsoft.Json.JsonProperty("LocalInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalInstrument { get; set; } = default!;

        /// <summary>
        /// Status of a transfer, as assigned by the transaction administrator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string Status { get; set; }

        /// <summary>
        /// Reason Code provided for the status of a transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatusDetailStatusReason? StatusReason { get; set; } = default!;

        /// <summary>
        /// Reason provided for the status of a transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusReasonDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string? StatusReasonDescription { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StatusDetailStatusReason
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PendingFailingSettlement")]
        PendingFailingSettlement = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PendingSettlement")]
        PendingSettlement = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Proprietary")]
        Proprietary = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ProprietaryRejection")]
        ProprietaryRejection = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Suspended")]
        Suspended = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Unmatched")]
        Unmatched = 6,

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625