// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace FinnovationLabs.OpenBanking.Library.BankApiModels.UkObRw.V3p1p8.Vrp.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class OBDomesticVRPInstruction
    {
        /// <summary>
        /// Initializes a new instance of the OBDomesticVRPInstruction class.
        /// </summary>
        public OBDomesticVRPInstruction()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OBDomesticVRPInstruction class.
        /// </summary>
        /// <param name="instructionIdentification">Unique identification as
        /// assigned by an instructing party for an instructed party to
        /// unambiguously identify the instruction.
        /// Usage: the instruction identification is a point to point reference
        /// that can be used between the instructing party and the instructed
        /// party to refer to the individual instruction.
        /// It can be included in several messages related to the
        /// instruction.</param>
        /// <param name="endToEndIdentification">Unique identification assigned
        /// by the initiating party to unambiguously identify the transaction.
        /// This identification is passed on, unchanged, throughout the entire
        /// end-to-end chain.
        /// Usage: The end-to-end identification can be used for reconciliation
        /// or to link tasks relating to the transaction.
        /// It can be included in several messages related to the transaction.
        /// OB: The Faster Payments Scheme can only access 31 characters for
        /// the EndToEndIdentification field</param>
        /// <param name="supplementaryData">^ Additional information that can
        /// not be captured in the structured fields and/or any other specific
        /// block</param>
        public OBDomesticVRPInstruction(string instructionIdentification, string endToEndIdentification, OBCashAccountCreditor3 creditorAccount, OBVRPRemittanceInformation remittanceInformation = default(OBVRPRemittanceInformation), string localInstrument = default(string), OBActiveOrHistoricCurrencyAndAmount instructedAmount = default(OBActiveOrHistoricCurrencyAndAmount), OBBranchAndFinancialInstitutionIdentification6 creditorAgent = default(OBBranchAndFinancialInstitutionIdentification6), object supplementaryData = default(object))
        {
            InstructionIdentification = instructionIdentification;
            EndToEndIdentification = endToEndIdentification;
            RemittanceInformation = remittanceInformation;
            LocalInstrument = localInstrument;
            InstructedAmount = instructedAmount;
            CreditorAgent = creditorAgent;
            CreditorAccount = creditorAccount;
            SupplementaryData = supplementaryData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unique identification as assigned by an instructing
        /// party for an instructed party to unambiguously identify the
        /// instruction.
        /// Usage: the instruction identification is a point to point reference
        /// that can be used between the instructing party and the instructed
        /// party to refer to the individual instruction.
        /// It can be included in several messages related to the instruction.
        /// </summary>
        [JsonProperty(PropertyName = "InstructionIdentification")]
        public string InstructionIdentification { get; set; }

        /// <summary>
        /// Gets or sets unique identification assigned by the initiating party
        /// to unambiguously identify the transaction.
        /// This identification is passed on, unchanged, throughout the entire
        /// end-to-end chain.
        /// Usage: The end-to-end identification can be used for reconciliation
        /// or to link tasks relating to the transaction.
        /// It can be included in several messages related to the transaction.
        /// OB: The Faster Payments Scheme can only access 31 characters for
        /// the EndToEndIdentification field
        /// </summary>
        [JsonProperty(PropertyName = "EndToEndIdentification")]
        public string EndToEndIdentification { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RemittanceInformation")]
        public OBVRPRemittanceInformation RemittanceInformation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LocalInstrument")]
        public string LocalInstrument { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "InstructedAmount")]
        public OBActiveOrHistoricCurrencyAndAmount InstructedAmount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CreditorAgent")]
        public OBBranchAndFinancialInstitutionIdentification6 CreditorAgent { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CreditorAccount")]
        public OBCashAccountCreditor3 CreditorAccount { get; set; }

        /// <summary>
        /// Gets or sets ^ Additional information that can not be captured in
        /// the structured fields and/or any other specific block
        /// </summary>
        [JsonProperty(PropertyName = "SupplementaryData")]
        public object SupplementaryData { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (InstructionIdentification == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "InstructionIdentification");
            }
            if (EndToEndIdentification == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EndToEndIdentification");
            }
            if (CreditorAccount == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CreditorAccount");
            }
            if (InstructionIdentification != null)
            {
                if (InstructionIdentification.Length > 35)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "InstructionIdentification", 35);
                }
            }
            if (EndToEndIdentification != null)
            {
                if (EndToEndIdentification.Length > 35)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "EndToEndIdentification", 35);
                }
            }
            if (RemittanceInformation != null)
            {
                RemittanceInformation.Validate();
            }
            if (InstructedAmount != null)
            {
                InstructedAmount.Validate();
            }
            if (CreditorAgent != null)
            {
                CreditorAgent.Validate();
            }
            if (CreditorAccount != null)
            {
                CreditorAccount.Validate();
            }
        }
    }
}
