// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace FinnovationLabs.OpenBanking.Library.BankApiModels.UkObRw.V3p1p8.Vrp.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class OBDomesticVRPControlParametersPeriodicLimitsItem
    {
        /// <summary>
        /// Initializes a new instance of the
        /// OBDomesticVRPControlParametersPeriodicLimitsItem class.
        /// </summary>
        public OBDomesticVRPControlParametersPeriodicLimitsItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// OBDomesticVRPControlParametersPeriodicLimitsItem class.
        /// </summary>
        /// <param name="periodType">^ Period type for this period limit.
        /// Possible values include: 'Day', 'Week', 'Fortnight', 'Month',
        /// 'Half-year', 'Year'</param>
        /// <param name="periodAlignment">^ Specifies whether the period starts
        /// on the date of consent creation or lines up with a calendar.
        /// Possible values include: 'Consent', 'Calendar'</param>
        /// <param name="amount">^ A number of monetary units specified in an
        /// active currency where the unit of currency is explicit and
        /// compliant with ISO 4217.</param>
        /// <param name="currency">^ A code allocated to a currency by a
        /// Maintenance Agency under an international identification scheme, as
        /// described in the latest edition of the international standard ISO
        /// 4217 "Codes for the representation of currencies and funds".   |
        /// ActiveOrHistoricCurrencyCode</param>
        public OBDomesticVRPControlParametersPeriodicLimitsItem(OBDomesticVRPControlParametersPeriodicLimitsItemPeriodTypeEnum periodType, OBDomesticVRPControlParametersPeriodicLimitsItemPeriodAlignmentEnum periodAlignment, string amount, string currency)
        {
            PeriodType = periodType;
            PeriodAlignment = periodAlignment;
            Amount = amount;
            Currency = currency;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets ^ Period type for this period limit. Possible values
        /// include: 'Day', 'Week', 'Fortnight', 'Month', 'Half-year', 'Year'
        /// </summary>
        [JsonProperty(PropertyName = "PeriodType")]
        public OBDomesticVRPControlParametersPeriodicLimitsItemPeriodTypeEnum PeriodType { get; set; }

        /// <summary>
        /// Gets or sets ^ Specifies whether the period starts on the date of
        /// consent creation or lines up with a calendar. Possible values
        /// include: 'Consent', 'Calendar'
        /// </summary>
        [JsonProperty(PropertyName = "PeriodAlignment")]
        public OBDomesticVRPControlParametersPeriodicLimitsItemPeriodAlignmentEnum PeriodAlignment { get; set; }

        /// <summary>
        /// Gets or sets ^ A number of monetary units specified in an active
        /// currency where the unit of currency is explicit and compliant with
        /// ISO 4217.
        /// </summary>
        [JsonProperty(PropertyName = "Amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or sets ^ A code allocated to a currency by a Maintenance
        /// Agency under an international identification scheme, as described
        /// in the latest edition of the international standard ISO 4217 "Codes
        /// for the representation of currencies and funds".   |
        /// ActiveOrHistoricCurrencyCode
        /// </summary>
        [JsonProperty(PropertyName = "Currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Amount == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Amount");
            }
            if (Currency == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Currency");
            }
        }
    }
}
