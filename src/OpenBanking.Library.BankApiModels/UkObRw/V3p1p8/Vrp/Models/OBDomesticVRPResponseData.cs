// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace FinnovationLabs.OpenBanking.Library.BankApiModels.UkObRw.V3p1p8.Vrp.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class OBDomesticVRPResponseData
    {
        /// <summary>
        /// Initializes a new instance of the OBDomesticVRPResponseData class.
        /// </summary>
        public OBDomesticVRPResponseData()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OBDomesticVRPResponseData class.
        /// </summary>
        /// <param name="domesticVRPId">Unique identification as assigned by
        /// the ASPSP to uniquely identify the domestic payment resource.
        /// </param>
        /// <param name="consentId">Identifier for the Domestic VRP Consent
        /// that this payment is made under.
        /// </param>
        /// <param name="creationDateTime">Date and time at which the resource
        /// was created.
        /// </param>
        /// <param name="status">Specifies the status of the payment
        /// information group. Possible values include:
        /// 'AcceptedCreditSettlementCompleted', 'AcceptedWithoutPosting',
        /// 'AcceptedSettlementCompleted', 'AcceptedSettlementInProcess',
        /// 'Pending', 'Rejected'</param>
        /// <param name="statusUpdateDateTime">Date and time at which the
        /// resource status was updated.
        /// </param>
        /// <param name="expectedExecutionDateTime">Expected execution date and
        /// time for the payment resource.
        /// </param>
        /// <param name="expectedSettlementDateTime">Expected settlement date
        /// and time for the payment resource.
        /// </param>
        public OBDomesticVRPResponseData(string domesticVRPId, string consentId, System.DateTimeOffset creationDateTime, OBDomesticVRPResponseDataStatusEnum status, System.DateTimeOffset statusUpdateDateTime, OBDomesticVRPInitiation initiation, OBDomesticVRPInstruction instruction, OBCashAccountDebtorWithName debtorAccount, System.DateTimeOffset? expectedExecutionDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? expectedSettlementDateTime = default(System.DateTimeOffset?), OBCashAccountDebtorWithName refund = default(OBCashAccountDebtorWithName), IList<OBDomesticVRPResponseDataChargesItem> charges = default(IList<OBDomesticVRPResponseDataChargesItem>))
        {
            DomesticVRPId = domesticVRPId;
            ConsentId = consentId;
            CreationDateTime = creationDateTime;
            Status = status;
            StatusUpdateDateTime = statusUpdateDateTime;
            ExpectedExecutionDateTime = expectedExecutionDateTime;
            ExpectedSettlementDateTime = expectedSettlementDateTime;
            Refund = refund;
            Charges = charges;
            Initiation = initiation;
            Instruction = instruction;
            DebtorAccount = debtorAccount;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unique identification as assigned by the ASPSP to
        /// uniquely identify the domestic payment resource.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "DomesticVRPId")]
        public string DomesticVRPId { get; set; }

        /// <summary>
        /// Gets or sets identifier for the Domestic VRP Consent that this
        /// payment is made under.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "ConsentId")]
        public string ConsentId { get; set; }

        /// <summary>
        /// Gets or sets date and time at which the resource was created.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "CreationDateTime")]
        public System.DateTimeOffset CreationDateTime { get; set; }

        /// <summary>
        /// Gets or sets specifies the status of the payment information group.
        /// Possible values include: 'AcceptedCreditSettlementCompleted',
        /// 'AcceptedWithoutPosting', 'AcceptedSettlementCompleted',
        /// 'AcceptedSettlementInProcess', 'Pending', 'Rejected'
        /// </summary>
        [JsonProperty(PropertyName = "Status")]
        public OBDomesticVRPResponseDataStatusEnum Status { get; set; }

        /// <summary>
        /// Gets or sets date and time at which the resource status was
        /// updated.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "StatusUpdateDateTime")]
        public System.DateTimeOffset StatusUpdateDateTime { get; set; }

        /// <summary>
        /// Gets or sets expected execution date and time for the payment
        /// resource.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "ExpectedExecutionDateTime")]
        public System.DateTimeOffset? ExpectedExecutionDateTime { get; set; }

        /// <summary>
        /// Gets or sets expected settlement date and time for the payment
        /// resource.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "ExpectedSettlementDateTime")]
        public System.DateTimeOffset? ExpectedSettlementDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Refund")]
        public OBCashAccountDebtorWithName Refund { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Charges")]
        public IList<OBDomesticVRPResponseDataChargesItem> Charges { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Initiation")]
        public OBDomesticVRPInitiation Initiation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Instruction")]
        public OBDomesticVRPInstruction Instruction { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DebtorAccount")]
        public OBCashAccountDebtorWithName DebtorAccount { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DomesticVRPId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DomesticVRPId");
            }
            if (ConsentId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ConsentId");
            }
            if (Initiation == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Initiation");
            }
            if (Instruction == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Instruction");
            }
            if (DebtorAccount == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DebtorAccount");
            }
            if (DomesticVRPId != null)
            {
                if (DomesticVRPId.Length > 40)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DomesticVRPId", 40);
                }
            }
            if (ConsentId != null)
            {
                if (ConsentId.Length > 128)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ConsentId", 128);
                }
            }
            if (Refund != null)
            {
                Refund.Validate();
            }
            if (Charges != null)
            {
                foreach (var element in Charges)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Initiation != null)
            {
                Initiation.Validate();
            }
            if (Instruction != null)
            {
                Instruction.Validate();
            }
            if (DebtorAccount != null)
            {
                DebtorAccount.Validate();
            }
        }
    }
}
