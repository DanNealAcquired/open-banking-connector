// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace FinnovationLabs.OpenBanking.Library.BankApiModels.UkObRw.V3p1p8.Vrp.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class OBDomesticVRPControlParameters
    {
        /// <summary>
        /// Initializes a new instance of the OBDomesticVRPControlParameters
        /// class.
        /// </summary>
        public OBDomesticVRPControlParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OBDomesticVRPControlParameters
        /// class.
        /// </summary>
        /// <param name="vRPType">^ The types of payments that can be made
        /// under this VRP consent. This can be used to indicate whether this
        /// include sweeping payment or other ecommerce payments.  |
        /// OBVRPConsentType - Namespaced Enumeration</param>
        /// <param name="validFromDateTime">^ Start date time for which the
        /// consent remains valid. | ISODateTime</param>
        /// <param name="validToDateTime">^ End date time for which the consent
        /// remains valid. | ISODateTime</param>
        /// <param name="pSUAuthenticationMethods">^ Indicates that the PSU
        /// authentication methods supported.  | OBVRPAuthenticationMethods -
        /// Namespaced Enumeration</param>
        /// <param name="supplementaryData">^ Additional information that can
        /// not be captured in the structured fields and/or any other specific
        /// block</param>
        public OBDomesticVRPControlParameters(IList<string> vRPType, System.DateTimeOffset? validFromDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? validToDateTime = default(System.DateTimeOffset?), OBDomesticVRPControlParametersMaximumIndividualAmount maximumIndividualAmount = default(OBDomesticVRPControlParametersMaximumIndividualAmount), IList<OBDomesticVRPControlParametersPeriodicLimitsItem> periodicLimits = default(IList<OBDomesticVRPControlParametersPeriodicLimitsItem>), IList<string> pSUAuthenticationMethods = default(IList<string>), object supplementaryData = default(object))
        {
            ValidFromDateTime = validFromDateTime;
            ValidToDateTime = validToDateTime;
            MaximumIndividualAmount = maximumIndividualAmount;
            PeriodicLimits = periodicLimits;
            VRPType = vRPType;
            PSUAuthenticationMethods = pSUAuthenticationMethods;
            SupplementaryData = supplementaryData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets ^ Start date time for which the consent remains valid.
        /// | ISODateTime
        /// </summary>
        [JsonProperty(PropertyName = "ValidFromDateTime")]
        public System.DateTimeOffset? ValidFromDateTime { get; set; }

        /// <summary>
        /// Gets or sets ^ End date time for which the consent remains valid. |
        /// ISODateTime
        /// </summary>
        [JsonProperty(PropertyName = "ValidToDateTime")]
        public System.DateTimeOffset? ValidToDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MaximumIndividualAmount")]
        public OBDomesticVRPControlParametersMaximumIndividualAmount MaximumIndividualAmount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PeriodicLimits")]
        public IList<OBDomesticVRPControlParametersPeriodicLimitsItem> PeriodicLimits { get; set; }

        /// <summary>
        /// Gets or sets ^ The types of payments that can be made under this
        /// VRP consent. This can be used to indicate whether this include
        /// sweeping payment or other ecommerce payments.  | OBVRPConsentType -
        /// Namespaced Enumeration
        /// </summary>
        [JsonProperty(PropertyName = "VRPType")]
        public IList<string> VRPType { get; set; }

        /// <summary>
        /// Gets or sets ^ Indicates that the PSU authentication methods
        /// supported.  | OBVRPAuthenticationMethods - Namespaced Enumeration
        /// </summary>
        [JsonProperty(PropertyName = "PSUAuthenticationMethods")]
        public IList<string> PSUAuthenticationMethods { get; set; }

        /// <summary>
        /// Gets or sets ^ Additional information that can not be captured in
        /// the structured fields and/or any other specific block
        /// </summary>
        [JsonProperty(PropertyName = "SupplementaryData")]
        public object SupplementaryData { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (VRPType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "VRPType");
            }
            if (MaximumIndividualAmount != null)
            {
                MaximumIndividualAmount.Validate();
            }
            if (PeriodicLimits != null)
            {
                foreach (var element in PeriodicLimits)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (VRPType != null)
            {
                if (VRPType.Count < 1)
                {
                    throw new ValidationException(ValidationRules.MinItems, "VRPType", 1);
                }
            }
            if (PSUAuthenticationMethods != null)
            {
                if (PSUAuthenticationMethods.Count < 1)
                {
                    throw new ValidationException(ValidationRules.MinItems, "PSUAuthenticationMethods", 1);
                }
            }
        }
    }
}
