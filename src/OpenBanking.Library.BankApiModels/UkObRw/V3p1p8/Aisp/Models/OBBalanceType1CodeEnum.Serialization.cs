// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace AccountAndTransactionAPISpecification.Models
{
    internal static partial class OBBalanceType1CodeEnumExtensions
    {
        public static string ToSerialString(this OBBalanceType1CodeEnum value) => value switch
        {
            OBBalanceType1CodeEnum.ClosingAvailable => "ClosingAvailable",
            OBBalanceType1CodeEnum.ClosingBooked => "ClosingBooked",
            OBBalanceType1CodeEnum.ClosingCleared => "ClosingCleared",
            OBBalanceType1CodeEnum.Expected => "Expected",
            OBBalanceType1CodeEnum.ForwardAvailable => "ForwardAvailable",
            OBBalanceType1CodeEnum.Information => "Information",
            OBBalanceType1CodeEnum.InterimAvailable => "InterimAvailable",
            OBBalanceType1CodeEnum.InterimBooked => "InterimBooked",
            OBBalanceType1CodeEnum.InterimCleared => "InterimCleared",
            OBBalanceType1CodeEnum.OpeningAvailable => "OpeningAvailable",
            OBBalanceType1CodeEnum.OpeningBooked => "OpeningBooked",
            OBBalanceType1CodeEnum.OpeningCleared => "OpeningCleared",
            OBBalanceType1CodeEnum.PreviouslyClosedBooked => "PreviouslyClosedBooked",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown OBBalanceType1CodeEnum value.")
        };

        public static OBBalanceType1CodeEnum ToOBBalanceType1CodeEnum(this string value)
        {
            if (string.Equals(value, "ClosingAvailable", StringComparison.InvariantCultureIgnoreCase)) return OBBalanceType1CodeEnum.ClosingAvailable;
            if (string.Equals(value, "ClosingBooked", StringComparison.InvariantCultureIgnoreCase)) return OBBalanceType1CodeEnum.ClosingBooked;
            if (string.Equals(value, "ClosingCleared", StringComparison.InvariantCultureIgnoreCase)) return OBBalanceType1CodeEnum.ClosingCleared;
            if (string.Equals(value, "Expected", StringComparison.InvariantCultureIgnoreCase)) return OBBalanceType1CodeEnum.Expected;
            if (string.Equals(value, "ForwardAvailable", StringComparison.InvariantCultureIgnoreCase)) return OBBalanceType1CodeEnum.ForwardAvailable;
            if (string.Equals(value, "Information", StringComparison.InvariantCultureIgnoreCase)) return OBBalanceType1CodeEnum.Information;
            if (string.Equals(value, "InterimAvailable", StringComparison.InvariantCultureIgnoreCase)) return OBBalanceType1CodeEnum.InterimAvailable;
            if (string.Equals(value, "InterimBooked", StringComparison.InvariantCultureIgnoreCase)) return OBBalanceType1CodeEnum.InterimBooked;
            if (string.Equals(value, "InterimCleared", StringComparison.InvariantCultureIgnoreCase)) return OBBalanceType1CodeEnum.InterimCleared;
            if (string.Equals(value, "OpeningAvailable", StringComparison.InvariantCultureIgnoreCase)) return OBBalanceType1CodeEnum.OpeningAvailable;
            if (string.Equals(value, "OpeningBooked", StringComparison.InvariantCultureIgnoreCase)) return OBBalanceType1CodeEnum.OpeningBooked;
            if (string.Equals(value, "OpeningCleared", StringComparison.InvariantCultureIgnoreCase)) return OBBalanceType1CodeEnum.OpeningCleared;
            if (string.Equals(value, "PreviouslyClosedBooked", StringComparison.InvariantCultureIgnoreCase)) return OBBalanceType1CodeEnum.PreviouslyClosedBooked;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown OBBalanceType1CodeEnum value.");
        }
    }
}
