// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace FinnovationLabs.OpenBanking.Library.BankApiModels.UkObRw.V3p1p8.Pisp.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class OBCashAccountCreditor3
    {
        /// <summary>
        /// Initializes a new instance of the OBCashAccountCreditor3 class.
        /// </summary>
        public OBCashAccountCreditor3()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OBCashAccountCreditor3 class.
        /// </summary>
        /// <param name="identification">Identification assigned by an
        /// institution to identify an account. This identification is known by
        /// the account owner.</param>
        /// <param name="name">Name of the account, as assigned by the account
        /// servicing institution.  Usage The account name is the name or names
        /// of the account owner(s) represented at an account level. The
        /// account name is not the product name or the nickname of the
        /// account.</param>
        /// <param name="secondaryIdentification">Secondary identification of
        /// the account, as assigned by the account servicing institution. This
        /// can be used by building societies to additionally identify accounts
        /// with a roll number (in addition to a sort code and account number
        /// combination).</param>
        public OBCashAccountCreditor3(string schemeName, string identification, string name, string secondaryIdentification = default(string))
        {
            SchemeName = schemeName;
            Identification = identification;
            Name = name;
            SecondaryIdentification = secondaryIdentification;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SchemeName")]
        public string SchemeName { get; set; }

        /// <summary>
        /// Gets or sets identification assigned by an institution to identify
        /// an account. This identification is known by the account owner.
        /// </summary>
        [JsonProperty(PropertyName = "Identification")]
        public string Identification { get; set; }

        /// <summary>
        /// Gets or sets name of the account, as assigned by the account
        /// servicing institution.  Usage The account name is the name or names
        /// of the account owner(s) represented at an account level. The
        /// account name is not the product name or the nickname of the
        /// account.
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets secondary identification of the account, as assigned
        /// by the account servicing institution. This can be used by building
        /// societies to additionally identify accounts with a roll number (in
        /// addition to a sort code and account number combination).
        /// </summary>
        [JsonProperty(PropertyName = "SecondaryIdentification")]
        public string SecondaryIdentification { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SchemeName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SchemeName");
            }
            if (Identification == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Identification");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Identification != null)
            {
                if (Identification.Length > 256)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Identification", 256);
                }
            }
            if (SecondaryIdentification != null)
            {
                if (SecondaryIdentification.Length > 34)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "SecondaryIdentification", 34);
                }
            }
        }
    }
}
