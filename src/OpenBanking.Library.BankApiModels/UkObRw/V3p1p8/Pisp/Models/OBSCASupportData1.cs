// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace FinnovationLabs.OpenBanking.Library.BankApiModels.UkObRw.V3p1p8.Pisp.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Supporting Data provided by TPP, when requesting SCA Exemption.
    /// </summary>
    public partial class OBSCASupportData1
    {
        /// <summary>
        /// Initializes a new instance of the OBSCASupportData1 class.
        /// </summary>
        public OBSCASupportData1()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OBSCASupportData1 class.
        /// </summary>
        /// <param name="requestedSCAExemptionType">This field allows a PISP to
        /// request specific SCA Exemption for a Payment Initiation. Possible
        /// values include: 'BillPayment', 'ContactlessTravel',
        /// 'EcommerceGoods', 'EcommerceServices', 'Kiosk', 'Parking',
        /// 'PartyToParty'</param>
        /// <param name="appliedAuthenticationApproach">Specifies a character
        /// string with a maximum length of 40 characters.
        /// Usage: This field indicates whether the PSU was subject to SCA
        /// performed by the TPP. Possible values include: 'CA', 'SCA'</param>
        /// <param name="referencePaymentOrderId">If the payment is recurring,
        /// then this field is populated with the transaction identifier of the
        /// previous payment occurrence so that the ASPSP can verify that the
        /// PISP, amount and the payee are the same as the previous occurrence.
        /// The value here refers to the payment id e.g. DomesticPaymentId
        /// </param>
        public OBSCASupportData1(OBSCASupportData1RequestedSCAExemptionTypeEnum? requestedSCAExemptionType = default(OBSCASupportData1RequestedSCAExemptionTypeEnum?), OBSCASupportData1AppliedAuthenticationApproachEnum? appliedAuthenticationApproach = default(OBSCASupportData1AppliedAuthenticationApproachEnum?), string referencePaymentOrderId = default(string))
        {
            RequestedSCAExemptionType = requestedSCAExemptionType;
            AppliedAuthenticationApproach = appliedAuthenticationApproach;
            ReferencePaymentOrderId = referencePaymentOrderId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets this field allows a PISP to request specific SCA
        /// Exemption for a Payment Initiation. Possible values include:
        /// 'BillPayment', 'ContactlessTravel', 'EcommerceGoods',
        /// 'EcommerceServices', 'Kiosk', 'Parking', 'PartyToParty'
        /// </summary>
        [JsonProperty(PropertyName = "RequestedSCAExemptionType")]
        public OBSCASupportData1RequestedSCAExemptionTypeEnum? RequestedSCAExemptionType { get; set; }

        /// <summary>
        /// Gets or sets specifies a character string with a maximum length of
        /// 40 characters.
        /// Usage: This field indicates whether the PSU was subject to SCA
        /// performed by the TPP. Possible values include: 'CA', 'SCA'
        /// </summary>
        [JsonProperty(PropertyName = "AppliedAuthenticationApproach")]
        public OBSCASupportData1AppliedAuthenticationApproachEnum? AppliedAuthenticationApproach { get; set; }

        /// <summary>
        /// Gets or sets if the payment is recurring, then this field is
        /// populated with the transaction identifier of the previous payment
        /// occurrence so that the ASPSP can verify that the PISP, amount and
        /// the payee are the same as the previous occurrence. The value here
        /// refers to the payment id e.g. DomesticPaymentId
        /// </summary>
        [JsonProperty(PropertyName = "ReferencePaymentOrderId")]
        public string ReferencePaymentOrderId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AppliedAuthenticationApproach != null)
            {
                if (AppliedAuthenticationApproach.ToString().Length > 40)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "AppliedAuthenticationApproach", 40);
                }
            }
            if (ReferencePaymentOrderId != null)
            {
                if (ReferencePaymentOrderId.Length > 40)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ReferencePaymentOrderId", 40);
                }
                if (ReferencePaymentOrderId.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ReferencePaymentOrderId", 1);
                }
            }
        }
    }
}
