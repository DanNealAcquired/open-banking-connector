// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace FinnovationLabs.OpenBanking.Library.BankApiModels.UkObRw.V3p1p9.Aisp.Models
{
    public partial class OBCurrencyExchange5
    {
        internal static OBCurrencyExchange5 DeserializeOBCurrencyExchange5(JsonElement element)
        {
            string sourceCurrency = default;
            Optional<string> targetCurrency = default;
            Optional<string> unitCurrency = default;
            float exchangeRate = default;
            Optional<string> contractIdentification = default;
            Optional<DateTimeOffset> quotationDate = default;
            Optional<OBCurrencyExchange5InstructedAmount> instructedAmount = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("SourceCurrency"))
                {
                    sourceCurrency = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("TargetCurrency"))
                {
                    targetCurrency = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("UnitCurrency"))
                {
                    unitCurrency = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ExchangeRate"))
                {
                    exchangeRate = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("ContractIdentification"))
                {
                    contractIdentification = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("QuotationDate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    quotationDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("InstructedAmount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    instructedAmount = OBCurrencyExchange5InstructedAmount.DeserializeOBCurrencyExchange5InstructedAmount(property.Value);
                    continue;
                }
            }
            return new OBCurrencyExchange5(sourceCurrency, targetCurrency.Value, unitCurrency.Value, exchangeRate, contractIdentification.Value, Optional.ToNullable(quotationDate), instructedAmount.Value);
        }
    }
}
