/* 
 * Payment Initiation API
 *
 * Swagger for Payment Initiation API Specification
 *
 * OpenAPI spec version: v3.1.2-RC1
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace FinnovationLabs.OpenBanking.Library.Connector.ObModels.PaymentInitiation.V3p1p2.Model
{
    /// <summary>
    /// The authorisation type request from the TPP.
    /// </summary>
    [DataContract]
    public partial class OBWriteFileConsent3DataAuthorisation :  IEquatable<OBWriteFileConsent3DataAuthorisation>, IValidatableObject
    {
        /// <summary>
        /// Type of authorisation flow requested.
        /// </summary>
        /// <value>Type of authorisation flow requested.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuthorisationTypeEnum
        {
            /// <summary>
            /// Enum Any for value: Any
            /// </summary>
            [EnumMember(Value = "Any")]
            Any = 1,

            /// <summary>
            /// Enum Single for value: Single
            /// </summary>
            [EnumMember(Value = "Single")]
            Single = 2

        }

        /// <summary>
        /// Type of authorisation flow requested.
        /// </summary>
        /// <value>Type of authorisation flow requested.</value>
        [DataMember(Name="AuthorisationType", EmitDefaultValue=false)]
        public AuthorisationTypeEnum AuthorisationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OBWriteFileConsent3DataAuthorisation" /> class.
        /// </summary>
        [JsonConstructor]
        protected OBWriteFileConsent3DataAuthorisation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OBWriteFileConsent3DataAuthorisation" /> class.
        /// </summary>
        /// <param name="completionDateTime">Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00.</param>
        /// <param name="authorisationType">Type of authorisation flow requested. (required).</param>
        public OBWriteFileConsent3DataAuthorisation(DateTime? completionDateTime = default(DateTime?), AuthorisationTypeEnum authorisationType = default(AuthorisationTypeEnum))
        {
            // to ensure "authorisationType" is required (not null)
            if (authorisationType == null)
            {
                throw new InvalidDataException("authorisationType is a required property for OBWriteFileConsent3DataAuthorisation and cannot be null");
            }
            else
            {
                this.AuthorisationType = authorisationType;
            }
            this.CompletionDateTime = completionDateTime;
        }
        
        /// <summary>
        /// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
        /// </summary>
        /// <value>Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00</value>
        [DataMember(Name="CompletionDateTime", EmitDefaultValue=false)]
        public DateTime? CompletionDateTime { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OBWriteFileConsent3DataAuthorisation {\n");
            sb.Append("  CompletionDateTime: ").Append(CompletionDateTime).Append("\n");
            sb.Append("  AuthorisationType: ").Append(AuthorisationType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OBWriteFileConsent3DataAuthorisation);
        }

        /// <summary>
        /// Returns true if OBWriteFileConsent3DataAuthorisation instances are equal
        /// </summary>
        /// <param name="input">Instance of OBWriteFileConsent3DataAuthorisation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OBWriteFileConsent3DataAuthorisation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CompletionDateTime == input.CompletionDateTime ||
                    (this.CompletionDateTime != null &&
                    this.CompletionDateTime.Equals(input.CompletionDateTime))
                ) && 
                (
                    this.AuthorisationType == input.AuthorisationType ||
                    (this.AuthorisationType != null &&
                    this.AuthorisationType.Equals(input.AuthorisationType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CompletionDateTime != null)
                    hashCode = hashCode * 59 + this.CompletionDateTime.GetHashCode();
                if (this.AuthorisationType != null)
                    hashCode = hashCode * 59 + this.AuthorisationType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
